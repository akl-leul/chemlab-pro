// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // For Vercel Postgres
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

// User model with authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  reactions     Reaction[]
  comments      Comment[]
  likes         Like[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Chemical element model
model Element {
  id                String   @id @default(cuid())
  atomicNumber      Int      @unique
  symbol            String   @unique
  name              String
  atomicMass        Float
  category          String
  group             Int?
  period            Int
  block             String
  electronConfig    String
  electronegativity Float?
  density           Float?
  meltingPoint      Float?
  boilingPoint      Float?
  discoveredBy      String?
  description       String   @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Chemical reaction model
model Reaction {
  id          String   @id @default(cuid())
  userId      String
  reactants   String
  products    String
  balanced    String
  safety      String[] @db.Text
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Blog post model
model BlogPost {
  id        String    @id @default(cuid())
  title     String
  slug      String    @unique
  content   String    @db.Text
  image     String?
  published Boolean   @default(false)
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
}

// Comment model
model Comment {
  id         String   @id @default(cuid())
  content    String   @db.Text
  blogPostId String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  blogPost BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Like model
model Like {
  id         String   @id @default(cuid())
  blogPostId String
  userId     String
  createdAt  DateTime @default(now())

  blogPost BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([blogPostId, userId])
}

enum Role {
  USER
  ADMIN
}
